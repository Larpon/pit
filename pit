#!/bin/bash
PIT_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PIT_PID=$$

PIT_VERSION=0.1

usage() {
cat << EOF
VERSION: $PIT_VERSION
USAGE:
    $(basename $0) [options]... '<command>' <directory> [directory]

DESCRIPTION:
    Enables execution of scripts and commands in current shell environment
    When <directory> input folder is modified

AUTHOR:
    Lars Pontoppidan <dev.larpon@gmail.com>

LICENSE:
    MIT license

OPTIONS:
    -e <command>
        Run <command> on end - when pit is empty
    -h
        Print this and exit
    -v
        Be verbose

EXAMPLES:
    * Copy every input file put in ./backup to /tmp/backup
    # $(basename $0) 'cp "\$PIT_FILE" /tmp/backup' ./backup

EOF
}

OSENV="linux"
if [ "$(uname)" == "Darwin" ]; then
    # Mac OS X platform
    OSENV="macos"
elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
    # GNU/Linux platform
    OSENV="linux"
elif [ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]; then
    # 32 bits Windows NT platform
    OSENV="win32"
elif [ "$(expr substr $(uname -s) 1 10)" == "MINGW64_NT" ]; then
    # 64 bits Windows NT platform
    OSENV="win64"
fi

info() {
    if [[ $PIT_VERBOSE -eq 0 ]]; then
        local green="\033[1;32m"
        local normal="\033[0m"
        echo -e "[${green}INFO${normal}] $1"
    fi
}

error() {
     local red="\033[1;31m"
     local normal="\033[0m"
     echo -e "[${red}ERROR${normal}] $1"
}

warn() {
    if [[ $PIT_VERBOSE -eq 0 ]]; then
        local red="\033[1;31m"
        local normal="\033[0m"
        echo -e "[${red}WARNING${normal}] $1"
    fi
}

cmdavail () {
    command -v "$1" >/dev/null 2>&1
}

check() {
    cmdavail $1 || { error >&2 "$2"; exit 1; }
}

full_path()
{
    if [ "$OSENV" == "macos" ]; then
        local fpath="$(readlink "$1")"
    else
        local fpath="$(readlink -f "$1")"
    fi

    echo "$fpath"
}

ensure_path() {
    if [ ! -d "$1" ]; then
        mkdir -p "$1"
    fi
}

check_flag_error() {
    if [[ "$1" == -* ]]; then
        usage
        error "One or more options not recognized..."
        exit 1
    fi
}

notify() {
    if [ "$OSENV" == "macos" ]; then
        afplay /System/Library/Sounds/Glass.aiff
        osascript -e "display notification \"$1\" with title \"pit\""
    else
        paplay /usr/share/sounds/Oxygen-Im-Cant-Connect.ogg
        notify-send "pit" "$1"
        if cmdavail kdeconnect-cli; then
            local device_id=bdf897f38bfe1eb7
            if kdeconnect-cli --list-available | grep "${device_id}" 2>&1 > /dev/null; then
                kdeconnect-cli -d "${device_id}" --ping-msg "pit $1"
            fi
        fi
    fi
}

on_end() {
    if [ "$PIT_ON_END" != "" ]; then
        count=$(find "$PIT_IN" -maxdepth 1 -type f | wc -l)
        if [ $count -eq 0 ]; then
            info "On end ($count) \"$PIT_ON_END\""
            (
                cd "$PIT_IN" && \
                eval "${PIT_ON_END}"
            ) &
        fi
    fi
}

check fswatch "'pit' needs 'fswatch' to run"

PIT_VERBOSE=1
PIT_ON_END=""

while getopts ":a:e:hv" OPTION
do
    case $OPTION in
        a ) check_flag_error "$OPTARG"; PIT_ARG=$OPTARG ;;
        e ) PIT_ON_END="$OPTARG" ;;
        h ) usage; exit 0 ;;
        v ) PIT_VERBOSE=0 ;;
        * ) usage; error "One or more options not recognized..."; exit 1 ;; # DEFAULT
    esac
done
shift "$(($OPTIND - 1))" # Move argument pointer to next argument.

__pit_arg=1
while test $# -gt 0; do
#  echo $1
#  echo "$__pit_arg"
  if [ $__pit_arg -eq 1 ]; then __pit_A1="$1"; fi
  if [ $__pit_arg -eq 2 ]; then __pit_A2="$1"; fi
  if [ $__pit_arg -eq 3 ]; then __pit_A3="$1"; fi
  let "__pit_arg += 1"
  shift
done

CMD="$__pit_A1"
if [ "$CMD" == "" ]; then
    usage
    error "You need to give a pit a <command>"
    exit 1
fi

PIT_IN="$__pit_A2"
if [ "$PIT_IN" == "" ]; then
    usage
    error "You need to give a vaild <directory> pit"
    exit 1
fi

if [ "$PIT_IN" != "" ]; then
    ensure_path "$PIT_IN"
    PIT_IN="$(full_path "$PIT_IN")"

    if [ "$PIT_IN" == "" ] || [ ! -d "$PIT_IN" ]; then
        usage
        error "Failed creating <directory> pit at $PIT_IN"
        exit 1
    fi
fi

PIT_OUT="$__pit_A3"
if [ "$PIT_OUT" != "" ]; then
    ensure_path "$PIT_OUT"
    PIT_OUT="$(full_path "$PIT_OUT")"
fi

if [ "$PIT_OUT" == "" ]; then
    PIT_OUT="$(full_path "$PIT_IN/../")"
fi

PIT_ID="$PIT_IN/.pit"
if [ "$PIT_IN" != "" ] && [ "$PIT_ID" != "" ]; then
    ensure_path "$PIT_ID"
fi

PIT_WORK="/tmp/.pit/$PIT_PID"
if [ "$PIT_WORK" != "" ]; then
    ensure_path "$PIT_WORK"
    PIT_WORK="$(full_path "$PIT_WORK")"
fi

info "Watching pit ($PIT_PID) $PIT_IN with command '$CMD'"
info "Work in $PIT_WORK output to $PIT_OUT"
fswatch -0 "$PIT_IN" | while read -d "" event; do

    # do something with ${event}
    #info "RAW EVENT ${event}"

    f="${event}" ##"$( cut -d',' -f 1 <<< "${event}" )"
    PIT_DO=0

    #PIT_LOCK="$PIT_ID/$f.lock"

    if [ ! -d "$PIT_IN" ]; then
        warn "Input directory \"$PIT_IN\" removed"
        PIT_DO=1
        #exit 0
    fi

#    if [[ $PIT_DO ]] && [ -d "$f" ]; then
#        info "DIR EVENT $f"
#    fi

    if [[ $PIT_DO ]] && [ -f "$f" ]; then
        info "File event $f"

        if [ -f "$f.lock" ]; then
            warn "Locked $f"
            PIT_DO=1
            continue
        fi

        if [[ "$f" == *.part ]]; then
            info "Skipping part file $f"
            PIT_DO=1
            continue
        fi

        if [[ "$f" == *.lock ]]; then
            info "Skipping lock file $f"
            PIT_DO=1
            continue
        fi

        if [ -f "$f" ]; then
            lsof "$f" 2>&1 > /dev/null
            if [ $? -eq 0 ]; then
                warn "Open $f"
                PIT_DO=1
                continue
            fi
        fi

        if [[ $PIT_DO ]] && [ -f "$f" ] && [ ! -f "$f.lock" ]; then
            touch "$f.lock"

            if [ "$PIT_OUT" != "" ] && [ ! -d "$PIT_OUT" ]; then
                ensure_path "$PIT_OUT"
                PIT_OUT="$(full_path "$PIT_OUT")"
            fi

            fbn=$(basename "$f")

            PIT_DIR="$PIT_WORK/$fbn"
            ensure_path "$PIT_DIR"
            info "Moving to $PIT_DIR"
            mv "$f" "$PIT_DIR"
            PIT_FILE="$PIT_DIR/$fbn"

            RUNCMD="$CMD"

            info "Running \"$RUNCMD\""
            (
                cd "$PIT_DIR" && \
                eval "${RUNCMD}" && \
                for __pit_outfile in $PIT_DIR/*; do \
                    if [ -e "$__pit_outfile" ]; then \
                        mv -- "$__pit_outfile" "$PIT_OUT/"; \
                    fi \
                done && \
                rmdir "$PIT_DIR" && rm "$f.lock" && on_end
            ) &
        fi

    fi

done

if [ -d "$PIT_WORK" ] && [ -z "$(ls -A "$PIT_WORK")" ]; then
    info "Removing empty working directory $PIT_WORK"
    rmdir "$PIT_WORK"
fi

if [ -d "$PIT_ID" ] && [ -z "$(ls -A "$PIT_ID")" ]; then
    info "Removing empty pit id directory $PIT_ID"
    rmdir "$PIT_ID"
fi
